version: "3.8"

services:

  db:
    container_name: db_container
    image: postgres:14.1-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - custom

  alembic_migrations:
    container_name: alembic_container
    build:
      context: .
    command:
      ['alembic', 'upgrade', 'head']
    depends_on:
      db:
        condition: service_healthy
        restart: true
    networks:
      - custom


  app:
    container_name: app_container
    build:
      context: .
    env_file:
      - .env
    ports:
      - 8000:8000
    restart: always
    depends_on:
      - db
    networks:
      - custom

  redis:
    container_name: redis_container
    image: redis:7.2.4-alpine3.19
    ports:
      - '6380:6379'
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - custom

  celery_worker:
    container_name: celery_worker
    build:
      context: .
    command:
      ['celery', '-A', 'backend.celery_task:celery_app', 'worker', '--loglevel=info']
    volumes:
      - .:/usr/src/app/
    depends_on:
      - app
      - redis
    networks:
      - custom

  letsencrypt:
    container_name: certbot
    image: certbot/certbot:latest
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${APP_DOMAINNAME_EMAIL} -d ${APP_DOMAINNAME} -v --agree-tos
    # command: sh -c "certbot certonly --standalone -d ${APP_DOMAINNAME} --text --agree-tos --email ${APP_DOMAINNAME_EMAIL} --server https://acme-v02.api.letsencrypt.org/directory --rsa-key-size 4096 --verbose --keep-until-expiring --preferred-challenges=http"
    env_file:
      - .env
    # entrypoint: ""
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    networks:
      - custom

  webserver:
    container_name: nginx
    image: nginx:1.18
    restart: always
    env_file:
      - .env
    ports:
      - 80:80
      - 443:443
    depends_on:
      - app
    volumes:
      # where the nginx config is located
      - ./etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      # # where certbot placed the initial tls cert, and where refreshed certs will be placed
      - /etc/letsencrypt:/etc/letsencrypt
      # # where certbot writes challenge files to when being challenged by a Let's Encrypt server
      - /var/www/certbot:/var/www/certbot

    networks:
      - custom

volumes:
  db-data:

networks:
  custom:
    driver: bridge
