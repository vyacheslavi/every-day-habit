version: "3.8"

services:

  db:
    container_name: prod_db
    image: postgres:14.1-alpine
    # restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      # - ../2. Init Database:/docker-entrypoint-initdb.d
      - habrdb-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U habrpguser -d habrdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - custom

  db_test:
    container_name: test_db
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres_test
      - POSTGRES_PASSWORD=postgres_test
      - POSTGRES_DB=postgres_test
    ports:
      - "5433:5432"
    networks:
      - custom

  app:
    container_name: app
    build:
      context: .
      dockerfile: Dockerfile
    # command: bash -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    env_file:
      - .env
    ports:
      - 8000:8000
    restart: always
    depends_on:
      - db
      - db_test

  redis:
    container_name: redis
    image: redis:7.2.4-alpine3.19
    ports:
      - '6380:6379'
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 10s
      timeout: 5s
      retries: 5


  celery_worker:
    container_name: celery_worker
    build: .
    command: celery -A backend.celert_task.celery worker --loglevel=info
    volumes:
      - .:/app
    # environment:
      # - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    depends_on:
      - app
      - redis

  flower:
    container_name: flower
    build: .
    command: celery -A celery_worker.celery flower --port=5555
    ports:
      - 5556:5555
    # environment:
      # - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    depends_on:
      - app
      - redis
      - celery_worker

networks:
  custom:
    driver: bridge

volumes:
  habrdb-data:
